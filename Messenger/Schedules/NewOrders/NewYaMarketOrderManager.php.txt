<?php
/*
 *  Copyright 2024.  Baks.dev <admin@baks.dev>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

declare(strict_types=1);

namespace BaksDev\Yandex\Market\Orders\Messenger\Schedules\NewOrders;

use BaksDev\Orders\Order\Entity\Order;
use BaksDev\Orders\Order\Repository\CurrentOrderNumber\CurrentOrderNumberInterface;
use BaksDev\Orders\Order\Repository\ExistsOrderNumber\ExistsOrderNumberInterface;
use BaksDev\Orders\Order\UseCase\Admin\Status\OrderStatusHandler;
use BaksDev\Yandex\Market\Orders\UseCase\New\YandexMarketOrderDTO;
use BaksDev\Yandex\Market\Orders\UseCase\New\YandexMarketOrderHandler;
use BaksDev\Yandex\Market\Orders\UseCase\Status\New\NewYaMarketOrderStatusDTO;
use Psr\Log\LoggerInterface;

final class NewYaMarketOrderManager
{
    private LoggerInterface $logger;

    public function __construct(
        private readonly OrderStatusHandler $orderStatusHandler,
        private readonly CurrentOrderNumberInterface $currentOrderNumber,
        private readonly ExistsOrderNumberInterface $existsOrderNumber,
        private readonly YandexMarketOrderHandler $yandexMarketOrderHandler,
        LoggerInterface $yandexMarketOrdersLogger,
    ) {
        $this->logger = $yandexMarketOrdersLogger;
    }

    public function prepare(YandexMarketOrderDTO $order): void
    {
        $OrderEvent = $this->currentOrderNumber->getCurrentOrderEvent($order->getNumber());

        if($OrderEvent)
        {
            $NewYaMarketOrderStatusDTO = new NewYaMarketOrderStatusDTO();
            $OrderEvent->getDto($NewYaMarketOrderStatusDTO);

            /**
             * Если заказ существует и его статус Unpaid «В ожидании оплаты» - обновляем на статус NEW «Новый»
             */
            if($NewYaMarketOrderStatusDTO->isStatusUnpaid())
            {
                $NewYaMarketOrderStatusDTO->setOrderStatusNew();

                /**
                 * Ожидается, что статус NEW «Новый» объявлен ранее для резерва продукции
                 * применяем статус без проверки дублей (deduplicator: false)
                 */
                $handle = $this->orderStatusHandler->handle($NewYaMarketOrderStatusDTO, false);

                if($handle instanceof Order)
                {
                    $this->logger->info(
                        sprintf('Обновили заказ %s «Ожидающий оплату» => «Новый» ', $order->getNumber())
                    );
                }
            }

            return;
        }


        /** Дополнительно проверяем отсутствие заказа */

        $isExists = $this->existsOrderNumber->isExists($order->getNumber());

        if($isExists)
        {
            return;
        }

        /**
         * Создаем системный заказ если по какой-то причине ранее не был создан
         */

        $handle = $this->yandexMarketOrderHandler->handle($order);

        if($handle instanceof Order)
        {
            $this->logger->info(
                sprintf('Добавили новый заказ %s', $order->getNumber()),
                [__FILE__.':'.__LINE__]
            );

            return;
        }

        $this->logger->critical(
            sprintf('%s: Ошибка при добавлении заказа %s', $handle, $order->getNumber()),
            [__FILE__.':'.__LINE__]
        );
    }
}
